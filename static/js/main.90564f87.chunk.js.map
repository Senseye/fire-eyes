{"version":3,"sources":["serviceWorker.js","components/camera/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Camera","videoRef","React","createRef","canvasRef","this","setupCamera","decorateCameraVideo","video","current","navigator","mediaDevices","getUserMedia","audio","facingMode","ideal","then","stream","srcObject","console","error","posenet","net","canvas","renderFrame","requestAnimationFrame","context","getContext","readyState","HAVE_ENOUGH_DATA","estimateSinglePose","_ref","keypoints","leftEye","find","_ref2","part","rightEye","_ref3","drawImage","_this2","drawEmojiOn","position","x","y","font","strokeText","react_default","a","createElement","ref","id","width","height","style","maxWidth","autoPlay","display","Component","ReactDOM","render","camera","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"wRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wICqESC,6MAjFXC,SAAwCC,IAAMC,cAC9CC,UAA0CF,IAAMC,+FAG5CE,KAAKC,cACLD,KAAKE,4DAIL,IAAMC,EAAQH,KAAKJ,SAASQ,QACxBD,GAASE,UAAUC,aAAaC,cAChCF,UAAUC,aACLC,aAAa,CACVC,OAAO,EACPL,MAAO,CAAEM,WAAY,CAAEC,MAAO,kBAEjCC,KAAK,SAAAC,GACFT,EAAMU,UAAYD,GACnBE,QAAQC,8LAKDC,aAAZC,SACAd,EAAQH,KAAKJ,SAASQ,QACtBc,EAASlB,KAAKD,UAAUK,QAEV,SAAde,IACFC,sBAAsBD,GACtB,IAAME,EAAUH,EAAOI,WAAW,MAE9BnB,GAASkB,GAAWlB,EAAMoB,aAAepB,EAAMqB,kBAC/CP,EAAIQ,mBAAmBtB,GAAOQ,KAAK,SAAAe,GAAmB,IAAhBC,EAAgBD,EAAhBC,UAC5BC,EAAUD,EAAUE,KAAK,SAAAC,GAAA,MAAuB,YAAvBA,EAAGC,OAC5BC,EAAWL,EAAUE,KAAK,SAAAI,GAAA,MAAuB,aAAvBA,EAAGF,OAE/BV,GAAWO,GAAWI,IACtBX,EAAQa,UAAU/B,EAAO,EAAG,GAC5BgC,EAAKC,YAAYR,EAAQS,SAASC,EAAGV,EAAQS,SAASE,GACtDJ,EAAKC,YAAYJ,EAASK,SAASC,EAAGN,EAASK,SAASE,MAKxEpB,yIAGQmB,EAAWC,GACnB,IACMlB,EADSrB,KAAKD,UAAUK,QACPkB,WAAW,MAClCD,EAAQmB,KAAO,aACfnB,EAAQoB,WAtDF,eAsDoBH,EAAI,GAAIC,EAAI,qCAItC,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIC,IAAK7C,KAAKD,UACV+C,GAAG,SACHC,MAAO,IACPC,OAAQ,IACRC,MAAO,CACHC,SAAU,OACVH,MAAO,OACPC,OAAQ,UAGhBN,EAAAC,EAAAC,cAAA,SACIC,IAAK7C,KAAKJ,SACVkD,GAAG,QACHK,UAAQ,EACRJ,MAAO,IACPC,OAAQ,IACRC,MAAO,CAAEG,QAAS,kBA3EjBC,aCGrBC,IAASC,OAAOb,EAAAC,EAAAC,cAFJ,kBAAMF,EAAAC,EAAAC,cAACY,EAAD,OAEF,MAASC,SAASC,eAAe,SFyH3C,kBAAmBrD,WACrBA,UAAUsD,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.90564f87.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component, RefObject } from 'react'\nimport * as posenet from '@tensorflow-models/posenet'\n\nconst EMOJI = '\\u{1F525}'\n\nclass Camera extends Component {\n    videoRef: RefObject<HTMLVideoElement> = React.createRef<HTMLVideoElement>()\n    canvasRef: RefObject<HTMLCanvasElement> = React.createRef<HTMLCanvasElement>()\n\n    componentDidMount() {\n        this.setupCamera()\n        this.decorateCameraVideo()\n    }\n\n    setupCamera() {\n        const video = this.videoRef.current\n        if (video && navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices\n                .getUserMedia({\n                    audio: false,\n                    video: { facingMode: { ideal: 'environment' } }, // prefer rear-facing camera\n                })\n                .then(stream => {\n                    video.srcObject = stream\n                }, console.error)\n        }\n    }\n\n    async decorateCameraVideo() {\n        const net = await posenet.load()\n        const video = this.videoRef.current\n        const canvas = this.canvasRef.current\n\n        const renderFrame = () => {\n            requestAnimationFrame(renderFrame)\n            const context = canvas.getContext('2d')\n\n            if (video && context && video.readyState === video.HAVE_ENOUGH_DATA) {\n                net.estimateSinglePose(video).then(({ keypoints }) => {\n                    const leftEye = keypoints.find(({ part }) => part === 'leftEye')\n                    const rightEye = keypoints.find(({ part }) => part === 'rightEye')\n\n                    if (context && leftEye && rightEye) {\n                        context.drawImage(video, 0, 0)\n                        this.drawEmojiOn(leftEye.position.x, leftEye.position.y)\n                        this.drawEmojiOn(rightEye.position.x, rightEye.position.y)\n                    }\n                })\n            }\n        }\n        renderFrame()\n    }\n\n    drawEmojiOn(x: number, y: number) {\n        const canvas = this.canvasRef.current\n        const context = canvas.getContext('2d')\n        context.font = '32px serif'\n        context.strokeText(EMOJI, x - 16, y + 16)\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas\n                    ref={this.canvasRef}\n                    id=\"canvas\"\n                    width={640}\n                    height={480}\n                    style={{\n                        maxWidth: '100%',\n                        width: '100%',\n                        height: 'auto',\n                    }}\n                />\n                <video\n                    ref={this.videoRef}\n                    id=\"video\"\n                    autoPlay\n                    width={640}\n                    height={480}\n                    style={{ display: 'none' }}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Camera\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport Camera from './components/camera'\n\nconst App = () => <Camera />\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}